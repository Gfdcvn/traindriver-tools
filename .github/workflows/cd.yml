
name: Continous Deployment Workflow
on: [push]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/kacpermalachowski/${{ github.event.repository.name }}:${{ github.sha }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
      - run: yarn install  
      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} --target builder .
      - name: Save Docker Image
        run: docker save ${{ env.IMAGE_NAME }} > ${{ github.event.repository.name }}.tar.gz
      - name: Cache Docker Image
        uses: actions/cache@v2
        env:
          cache-name: cache-docker-image
        with:
          path: ${{ github.event.repository.name }}.tar.gz
          key: ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
      

  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Cache Docker Image
        uses: actions/cache@v2
        env:
          cache-name: cache-docker-image
        with:
          path: ${{ github.event.repository.name }}.tar.gz
          key: ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
          restore-keys: |
            ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
            ${{ github.event.repository.name }}-
      - name: Load Docker Image
        run: docker load < ${{ github.event.repository.name }}.tar.gz
      - name: Run unit tests
        run: docker run --rm ${{ env.IMAGE_NAME }} yarn test

  test-e2e:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: Cache Docker Image
        uses: actions/cache@v2
        env:
          cache-name: cache-docker-image
        with:
          path: ${{ github.event.repository.name }}.tar.gz
          key: ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
          restore-keys: |
            ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
            ${{ github.event.repository.name }}-
      - name: Load Docker Image
        run: docker load < ${{ github.event.repository.name }}.tar.gz
      - name: Run e2e tests
        run: |
          docker network create --driver bridge test-net
          docker run -d --name td2-tools --network test-net ${{ env.IMAGE_NAME }} yarn dev
          docker run -v $PWD:/e2e -w /e2e --network test-net --entrypoint cypress cypress/included:9.5.1 run --project . --config baseUrl=http://td2-tools:3000
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cypress-result
          path: |
            ${{github.workspace}}/cypress/videos/
            ${{github.workspace}}/cypress/screenshots/
          retention-days: 5



  deliver:
    runs-on: ubuntu-latest
    needs: [build,test-unit,test-e2e]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Cache Docker Image
        uses: actions/cache@v2
        env:
          cache-name: cache-docker-image
        with:
          path: ${{ github.event.repository.name }}.tar.gz
          key: ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
          restore-keys: |
            ${{ github.event.repository.name }}-${{ env.IMAGE_TAG }}
            ${{ github.event.repository.name }}-
      - name: Load Docker Image
        run: docker load < ${{ github.event.repository.name }}.tar.gz
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build prod Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} --cache-from ${{ env.IMAGE_NAME }} .
      - name: Push prod Docker Image
        run: docker push ${{ env.IMAGE_NAME }}
      - name: Tag as latest
        run: docker tag ${{ env.IMAGE_NAME }} ghcr.io/kacpermalachowski/${{ github.event.repository.name }}:latest
      - name: Push latest
        run: docker push ghcr.io/kacpermalachowski/${{ github.event.repository.name }}:latest



  deploy:
    runs-on: ubuntu-latest
    needs: [build,deliver]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Call deployer and release latest image
        run: curl -X POST -F "token=${{ secrets.DEPLOY_TOKEN }}" -F "restart_containers=true" -F "image=${{ env.IMAGE_NAME }}" https://deployer.kacpermalachowski.pl/images/pull